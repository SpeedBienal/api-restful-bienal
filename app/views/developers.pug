doctype html
html
	head
		meta(charset="utf-8")/
		meta(http-equiv="X-UA-Compatible", content="IE=edge")/
		meta(name="viewport", content="width=device-width, initial-scale=1")/
		meta(name="description", content="")/
		meta(name="author", content="Malows")/
		link(rel="shortcut icon", type="image/ico", href="img/favicon.ico")/
		link(rel="stylesheet", href="../css/stylesheet.css")/

		title Notas para el desarrollador
	body
		div.col-md-8.col-md-offset-2.col-xs-12.containter.box
			p.
				Esta es la primer version de la API para la bienal de arte joven, esperamos que este primer esfuerzo sirva como piedra angular para futuros desarrollos
				Como desarrollador de esta api y ser parte del grupo que inova en estos campos para la Bienal de Arte Joven, me tomé la libertad de bautizar la versión 1 como "Master Exploder"
			div.responsive-iframe
				iframe(src="https://www.youtube.com/embed/80DtQD5BQ_A", frameborder="0", allowfullscreen=true)
			hr
			h1 Como funciona la API
			hr
			p
				| Esta API tiene los siguientes endpoints
			ul
				il Personas
				il Artistas
				il Obras
				il Votos
				il Users
			p Todos son accesibles desde las rutas `/api/v1/..endpoint..`
			hr
			h4 Personas #[small GET, POST `/api/v1/personas`]
			p.
				Este endpoint se encarga del registro de personas y de la emisión de votos. Solo se crean personas cuando emiten el voto, de lo contrario, los usuarios no existen dentro del sistema. Esto implica que al utilizar la aplicación móvil no se crea una instancia de la persona en la base de datos hasta que esta emite el voto, una vez emitido, se disparan los creadores de votos. No se puede editar, para evitar cualquier problema a la hora de generar votos. Por lo tanto tampoco se puede eliminar la persona
			p.
				strong Atajos:
				| `/api/v1/personas/:persona_id` y `/api/v1/personas/uudi/:persona_uuid` Estos atajos tienen el mismo propósito, buscar si la persona existe en el sistema, se registra el uuid del telefono android de la persona que vota, para facilitar la busqueda y evitar el voto duplicado
			p
				strong View público:
				| No tiene

			hr
			h4 Artistas #[small GET, POST, PUT, DELETE `/api/v1/artistas`]
			p.
				Endpoint que se encarga de manejar los Artistas de la Bienal, el verbo GET puede ser utilizado libremente pero los otros verbos requieren un login de usuarios desde el dashboard del sistema, no fueron pensadas para que la aplicación móvil trate estos endpoint, porque los datos estan precargados en la aplicación, el espacio es barato, la disponibilidad de conectividad es incierta y la experiencia de usuario siempre vale más
			p
				strong Atajos:
				| `/api/v1/artistas/:artista_id` y `/api/v1/artistas/:artista_dni` Buscan un artista en particular, el id por defecto esta indexado, osea lo encuentra en 0 ms, pero dni no, de ser posible usar id. No queremos crear indices innecesarios para evitar el uso innecesario de memoria
			p
				strong View público:
				| `/artistar` view accesible desde el dashboard para la carga de artistar

			hr
			h4 Obras #[small GET, POST, PUT, DELETE `/api/v1/obras`]
			p.
				Al igual que el endpoint de artistas, Obras puede ser accedido por todos los verbos, pero requiere de una sesion abierta de usuarios desde el dashboard, no desde la aplicación móvil, es necesario crear primero el artista para luego referenciarlo a la obra. Esta información también debe estar presente en la app móvil
			p.
				strong Atajos:
				| `/api/v1/obras/:obras_id` y `/api/v1/obras/categorias/:categoria` Uso el atajo de id para buscar la obra y poder aplicarle los verbos GET, PUT, DELETE. Y el atajo de categoría para tener una lista de todas las obras de este tipo. (Entiendase categoría como audiovisuales, visuales, etc y clase como A o B)
			p
				strong View público:
				| `/obras` view accesible desde el dashboard para la carga de obras

			hr
			h4 Votos
				small GET `/api/v1/votos`
			p.
				Endpoint que se encarga de manejar los Artistas de la Bienal, el verbo GET puede ser utilizado libremente pero los otros verbos requieren un login de usuarios desde el dashboard del sistema, no fueron pensadas para que la aplicación móvil trate estos endpoint, porque los datos estan precargados en la aplicación, el espacio es barato, la disponibilidad de conectividad es incierta y la experiencia de usuario siempre vale más
			p
				strong Atajos:
				| `/api/v1/votacion` y `/api/v1/votacion/:categoria_voto` El atajo sin categoría devuelve una lista con los tops 3 de cada categoría y un total de votos, mientras que el atajo con categoría el total de votos de una sola categoría, para saber quien ganó
			p
				strong View público:
				| `/votacion` view del resultado real-time de la votación del público

			hr
			h4 Users #[small GET, POST, PUT, DELETE `/api/v1/users`]
			p.
				Endpoint de usuarios, debería funcionar todo o casi todo al remover la accesibilidad de este endpoint, pero en "paranoic mode", solo desde la app móvil se podría generar datos nuevos, que es registrar personas y una sola vez. Atenti, solo un usuario registrado puede registrar otro usuario, como medida de seguridad (permission allowing)
			p.
				strong Atajos:
				| `/api/v1/users/:user_id` y `/api/v1/users/username/:username` Hacen lo mismo, son un alias, pero ID esta indexado como se explicó arriba, desde estos se puede editar , pero solo si sos propietario del usuario que queres editar
			p
				strong View público:
				| `/` home, `/ingreso` login, `/salir` logout, `/registro` crear usuarios, `/dashboard` pequeño panel administrativo
